<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring的IOC入门</title>
      <link href="/2023/03/24/Spring%E7%9A%84IOC%E5%85%A5%E9%97%A8/"/>
      <url>/2023/03/24/Spring%E7%9A%84IOC%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring的IOC入门"><a href="#Spring的IOC入门" class="headerlink" title="Spring的IOC入门"></a>Spring的IOC入门</h1><blockquote><p>厚溥上课资料，存放一下</p></blockquote><h4 id="DI：依赖注入，一个BookService类的功能需要依赖另外一个BookDao类配合，同时需要赋上一"><a href="#DI：依赖注入，一个BookService类的功能需要依赖另外一个BookDao类配合，同时需要赋上一" class="headerlink" title="DI：依赖注入，一个BookService类的功能需要依赖另外一个BookDao类配合，同时需要赋上一"></a>DI：依赖注入，一个BookService类的功能需要依赖另外一个BookDao类配合，同时需要赋上一</h4><h4 id="个具体的对象，则成这种关系是依赖注入；"><a href="#个具体的对象，则成这种关系是依赖注入；" class="headerlink" title="个具体的对象，则成这种关系是依赖注入；"></a>个具体的对象，则成这种关系是依赖注入；</h4><h4 id="IOC：控制反转，以前依赖的对象自己直接new，现在不需要new，框架会自动注入对象，创建对"><a href="#IOC：控制反转，以前依赖的对象自己直接new，现在不需要new，框架会自动注入对象，创建对" class="headerlink" title="IOC：控制反转，以前依赖的对象自己直接new，现在不需要new，框架会自动注入对象，创建对"></a>IOC：控制反转，以前依赖的对象自己直接new，现在不需要new，框架会自动注入对象，创建对</h4><h4 id="象的权利转移给了框架；"><a href="#象的权利转移给了框架；" class="headerlink" title="象的权利转移给了框架；"></a>象的权利转移给了框架；</h4><h4 id="spring框架负责所有对象的创建、管理和依赖注入；所有的对象存储的容器叫做IOC容器；"><a href="#spring框架负责所有对象的创建、管理和依赖注入；所有的对象存储的容器叫做IOC容器；" class="headerlink" title="spring框架负责所有对象的创建、管理和依赖注入；所有的对象存储的容器叫做IOC容器；"></a>spring框架负责所有对象的创建、管理和依赖注入；所有的对象存储的容器叫做IOC容器；</h4><h2 id="1-创建项目，导入spring的jar包"><a href="#1-创建项目，导入spring的jar包" class="headerlink" title="1.创建项目，导入spring的jar包"></a>1.创建项目，导入spring的jar包</h2><h2 id="2-按照如下目录结构创建接口及其实现类，做好准备工作"><a href="#2-按照如下目录结构创建接口及其实现类，做好准备工作" class="headerlink" title="2.按照如下目录结构创建接口及其实现类，做好准备工作"></a>2.按照如下目录结构创建接口及其实现类，做好准备工作</h2><h4 id="servlet层"><a href="#servlet层" class="headerlink" title="servlet层"></a>servlet层</h4><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><h4 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServlet</span> &#123;</span><br><span class="line">BookService bookService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;BookServlet...add&quot;</span>);</span><br><span class="line">bookService.save();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口"><a href="#接口" class="headerlink" title="//接口"></a>//接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现类"><a href="#实现类" class="headerlink" title="//实现类"></a>//实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">System.out.println(&quot;BookServiceImpl...save&quot;);</span><br><span class="line">bookDao.insert();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><h4 id="此时项目没办法执行，因为没有做依赖对象的注入。"><a href="#此时项目没办法执行，因为没有做依赖对象的注入。" class="headerlink" title="此时项目没办法执行，因为没有做依赖对象的注入。"></a>此时项目没办法执行，因为没有做依赖对象的注入。</h4><h2 id="3-使用spring完成IOC的配置和DI依赖注入"><a href="#3-使用spring完成IOC的配置和DI依赖注入" class="headerlink" title="3.使用spring完成IOC的配置和DI依赖注入"></a>3.使用spring完成IOC的配置和DI依赖注入</h2><h3 id="1-）创建spring的核心配置文件"><a href="#1-）创建spring的核心配置文件" class="headerlink" title="1 ）创建spring的核心配置文件"></a>1 ）创建spring的核心配置文件</h3><h4 id="bean标签表示把对应class的对象创建到IOC容器中，如果当前对象有依赖的其他对象，那么可以"><a href="#bean标签表示把对应class的对象创建到IOC容器中，如果当前对象有依赖的其他对象，那么可以" class="headerlink" title="bean标签表示把对应class的对象创建到IOC容器中，如果当前对象有依赖的其他对象，那么可以"></a>bean标签表示把对应class的对象创建到IOC容器中，如果当前对象有依赖的其他对象，那么可以</h4><h4 id="通过property对依赖的对象使用ref引用容器中已经注册过的对象。"><a href="#通过property对依赖的对象使用ref引用容器中已经注册过的对象。" class="headerlink" title="通过property对依赖的对象使用ref引用容器中已经注册过的对象。"></a>通过property对依赖的对象使用ref引用容器中已经注册过的对象。</h4><h4 id="注意：BookServiceImpl需要给bookDao属性设置setter方法，框架才能自动注入"><a href="#注意：BookServiceImpl需要给bookDao属性设置setter方法，框架才能自动注入" class="headerlink" title="注意：BookServiceImpl需要给bookDao属性设置setter方法，框架才能自动注入"></a>注意：BookServiceImpl需要给bookDao属性设置setter方法，框架才能自动注入</h4><h5 id="接口-1"><a href="#接口-1" class="headerlink" title="//接口"></a>//接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现类-1"><a href="#实现类-1" class="headerlink" title="//实现类"></a>//实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;BookDaoImpl...save&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--把所有对象创建到spring的IOC容器中，并起上名字</span></span><br><span class="line"><span class="comment">id：表示给对象起名字</span></span><br><span class="line"><span class="comment">class：类的全类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chen.dao.impl.BookDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chen.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring的依赖注入：property表示BookServiceImpl的属性，常规属性使用value赋值，</span></span><br><span class="line"><span class="comment">类型属性使用ref引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-）在servlet中进行测试"><a href="#2-）在servlet中进行测试" class="headerlink" title="2 ）在servlet中进行测试"></a>2 ）在servlet中进行测试</h3><h4 id="1-首先获取IOC的容器；"><a href="#1-首先获取IOC的容器；" class="headerlink" title="1.首先获取IOC的容器；"></a>1.首先获取IOC的容器；</h4><h4 id="2-从容器中获取bookService对象；"><a href="#2-从容器中获取bookService对象；" class="headerlink" title="2.从容器中获取bookService对象；"></a>2.从容器中获取bookService对象；</h4><h4 id="3-执行方法：servlet执行—service执行，由于spring完成了依赖注入——dao层执行"><a href="#3-执行方法：servlet执行—service执行，由于spring完成了依赖注入——dao层执行" class="headerlink" title="3.执行方法：servlet执行—service执行，由于spring完成了依赖注入——dao层执行"></a>3.执行方法：servlet执行—service执行，由于spring完成了依赖注入——dao层执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;BookServiceImpl...save&quot;</span>);</span><br><span class="line">bookDao.insert();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServlet</span> &#123;</span><br><span class="line">BookService bookService;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;BookServlet...add&quot;</span>);</span><br><span class="line"><span class="comment">//1.获得IOC容器</span></span><br><span class="line">ClassPathXmlApplicationContext context=<span class="keyword">new</span></span><br><span class="line"><span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"><span class="comment">//2.根据名字从容器中获取对象</span></span><br><span class="line">bookService= (BookService) context.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">bookService.save();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2023/03/24/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/03/24/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="尝试使用md写一篇博客"><a href="#尝试使用md写一篇博客" class="headerlink" title="尝试使用md写一篇博客"></a>尝试使用md写一篇博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>2023-3-24 08:12:00</p><p>Java反射机制是指在运行时动态地获取类的信息并操作该类的方法、构造器和属性等。通过反射机制，可以在运行时获取类的所有信息，包括类名、父类、接口、构造器、方法和属性等。Java反射机制是Java语言的一种特性，让Java程序能够在运行时动态地获取类的信息和操作类的对象。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>Java反射机制提供了一种机制，让程序在运行时获取类的信息和操作类的对象。这种机制可以让程序实现更加灵活的操作，可以在运行时根据需要动态地创建对象、调用方法和操作属性等。Java反射机制广泛应用于框架开发、单元测试、动态配置和插件化开发等领域。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>Java反射机制的优点是可以在运行时动态地获取类的信息和操作类的对象，让程序更加灵活、可扩展和可维护。Java反射机制的缺点是性能较差，因为在运行时需要进行大量的动态调用，会导致程序的运行速度变慢。此外，Java反射机制也存在一定的安全风险，因为可以在运行时动态地操作类的对象，可能会导致程序的安全性问题。</p><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><p>要使用Java反射机制，首先需要获取Class对象。有三种方式可以获取Class对象：通过类名获取、通过对象实例获取和通过Class.forName()方法获取。其中，通过Class.forName()方法获取Class对象最常用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过类名获取Class对象 Class&lt;?&gt; </span></span><br><span class="line">clazz1 = fun.snowice.service.impl.BookServiceImpl.class; </span><br><span class="line"><span class="comment">// 通过对象实例获取Class对象 BookService bookService = new BookServiceVip(); </span></span><br><span class="line">Class&lt;?&gt; clazz2 = bookService.getClass(); </span><br><span class="line"><span class="comment">// 通过Class.forName()方法获取Class对象 </span></span><br><span class="line">Class&lt;?&gt; clazz3 = Class.forName(<span class="string">&quot;fun.snowice.service.impl.BookServiceSvip&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserService 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// UserService 实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据 id 查询数据库获取用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// UserService 代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target; <span class="comment">// 目标对象</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用方法 &quot;</span> + method.getName() + <span class="string">&quot; 前打印日志&quot;</span>); <span class="comment">// 前置通知</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args); <span class="comment">// 调用目标方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用方法 &quot;</span> + method.getName() + <span class="string">&quot; 后打印日志&quot;</span>); <span class="comment">// 后置通知</span></span><br><span class="line">        <span class="keyword">return</span> result; <span class="comment">// 返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>(); <span class="comment">// 创建目标对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance(</span><br><span class="line">            userService.getClass().getClassLoader(), <span class="comment">// 类加载器</span></span><br><span class="line">            userService.getClass().getInterfaces(), <span class="comment">// 目标对象实现的接口</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">UserServiceProxy</span>(userService) <span class="comment">// 代理对象</span></span><br><span class="line">        );</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> proxy.getUserById(<span class="number">1</span>); <span class="comment">// 调用代理对象的方法</span></span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释中主要解释了各个类和方法的作用，以及在动态代理中的具体应用。其中，<code>UserServiceImpl</code> 是目标对象，<code>UserServiceProxy</code> 是代理对象，<code>Test</code> 类则是用于测试的主类。在 <code>UserServiceProxy</code> 中，我们实现了 <code>InvocationHandler</code> 接口，并在 <code>invoke</code> 方法中编写了前置通知、目标方法调用、后置通知等代码，用于实现对目标方法的增强。在 <code>Test</code> 类中，我们首先创建了目标对象 <code>userService</code>，然后通过 <code>Proxy</code> 类的 <code>newProxyInstance</code> 方法创建了一个代理对象 <code>proxy</code>，并将目标对象和代理对象传递给了 <code>UserServiceProxy</code>。最后，我们调用代理对象的方法 <code>getUserById</code>，实际上是调用了 <code>UserServiceProxy</code> 中的 <code>invoke</code> 方法，在这个方法中又调用了 <code>UserServiceImpl</code> 中的 <code>getUserById</code> 方法，并在前后打印了日志。</p><h2 id="Java反射机制的应用场景"><a href="#Java反射机制的应用场景" class="headerlink" title="Java反射机制的应用场景"></a>Java反射机制的应用场景</h2><h3 id="框架开发"><a href="#框架开发" class="headerlink" title="框架开发"></a>框架开发</h3><p>Java反射机制广泛应用于框架开发中。例如Spring框架中，通过反射机制实现了IoC容器和AOP功能。通过反射机制，可以在运行时动态地创建对象、调用方法和操作属性等，让框架更加灵活、可扩展和可维护。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>Java反射机制也可以用于单元测试中。例如JUnit框架中，通过反射机制调用测试方法，可以实现自动化测试。通过反射机制，可以在运行时动态地获取类的信息和操作类的对象，让单元测试更加灵活、可扩展和可维护。</p><h2 id="Java反射机制的注意事项"><a href="#Java反射机制的注意事项" class="headerlink" title="Java反射机制的注意事项"></a>Java反射机制的注意事项</h2><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>Java反射机制的缺点之一是性能较差。在运行时需要进行大量的动态调用，会导致程序的运行速度变慢。因此，在使用Java反射机制时需要注意性能问题，尽可能地减少反射调用的次数。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java反射机制是Java语言的一种特性，让Java程序能够在运行时动态地获取类的信息和操作类的对象。通过反射机制，可以在运行时获取类的所有信息，包括类名、父类、接口、构造器、方法和属性等。Java反射机制广泛应用于框架开发、单元测试、动态配置和插件化开发等领域。在使用Java反射机制时，需要注意性能问题和安全问题，确保反射调用的对象和方法都是可信的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二篇博客</title>
      <link href="/2023/03/24/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/03/24/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="同样这是测试"><a href="#同样这是测试" class="headerlink" title="同样这是测试"></a>同样这是测试</h2><p><strong>添加图片</strong><br><img src="https://image.snowice.fun/bg-image/Snow.png" alt="图标"></p><p><strong>删除线</strong><br><del>删除了</del></p><p><strong>html代码块</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// 测试代码高亮</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">generateCode</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> code = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> codeLength = <span class="number">6</span>; <span class="comment">//验证码的长度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> checkCode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;checkCode&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> random = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>);<span class="comment">//随机数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; codeLength; i++) &#123;<span class="comment">//循环操作</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">36</span>);<span class="comment">//取得随机数的索引（0~35）</span></span></span><br><span class="line"><span class="language-javascript">    code += random[index];<span class="comment">//根据索引取得随机数加到code上</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  checkCode.<span class="property">value</span> = code;<span class="comment">//把code值赋给验证码</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//校验验证码</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">validate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> inputCode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;inputCode&quot;</span>).<span class="property">value</span>.<span class="title function_">toUpperCase</span>(); <span class="comment">//取得输入的验证码并转化为大写</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(inputCode.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123; <span class="comment">//若输入的验证码长度为0</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;请输入验证码！&quot;</span>); <span class="comment">//则弹出请输入验证码</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">else</span> <span class="keyword">if</span>(inputCode != code ) &#123; <span class="comment">//若输入的验证码与产生的验证码不一致时</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;验证码输入错误！@_@&quot;</span>); <span class="comment">//则弹出验证码输入错误</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createCode</span>();<span class="comment">//刷新验证码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;inputCode&quot;</span>).<span class="property">value</span> = <span class="string">&quot;&quot;</span>;<span class="comment">//清空文本框</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">else</span> &#123; <span class="comment">//输入正确时</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;^-^&quot;</span>); <span class="comment">//弹出^-^</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form&quot;</span>).<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;generateCode()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkCode&quot;</span>&gt;</span>验证码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkCode&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;看不清，换一张😂&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;generateCode()&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputCode&quot;</span>&gt;</span>请输入验证码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputCode&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;验证&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;validate()&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>引用</strong></p><blockquote><p>我被引用啦 晚安</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2023/03/23/2023-03-23%20%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/03/23/2023-03-23%20%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一篇文章（测试）"><a href="#第一篇文章（测试）" class="headerlink" title="第一篇文章（测试）"></a>第一篇文章（测试）</h2><h3 id="测试代码块"><a href="#测试代码块" class="headerlink" title="测试代码块"></a>测试代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;测试java代码块&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MD 语法不会 明天再搞</strong></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
